"use client";

import React, { useState, useEffect, useRef } from 'react';
import Link from 'next/link';
import { formatCurrency } from '../../utils/costEstimator';
import BayLayoutVisualizer from './BayLayoutVisualizer';

/**
 * ResultsDisplay component for showing calculation results
 */
const ResultsDisplay = ({ 
  results, 
  onSaveClick,
  isMobile,
  buildingLength,
  buildingWidth,
  lengthwiseBays,
  widthwiseBays,
  joistsRunLengthwise,
  useCustomBayDimensions,
  customLengthwiseBayWidths,
  customWidthwiseBayWidths,
  onToggleJoistDirection,
  onToggleCustomBayDimensions,
  onLengthwiseBayWidthChange,
  onWidthwiseBayWidthChange
}) => {
  // Add client-side state to avoid hydration mismatch
  const [isClient, setIsClient] = useState(false);
  // Track results changes with local state
  const [localJoistSize, setLocalJoistSize] = useState(null);
  // Create refs to directly update DOM elements
  const joistWidthRef = useRef(null);
  const joistDepthRef = useRef(null);
  const resultsRef = useRef(null);
  
  // Use a force update counter
  const [updateCounter, setUpdateCounter] = useState(0);
  
  // Set isClient to true once component mounts on client
  useEffect(() => {
    setIsClient(true);
  }, []);
  
  // Direct DOM update for joist sizes to bypass hydration issues
  useEffect(() => {
    if (isClient && results?.joistSize && joistWidthRef.current && joistDepthRef.current) {
      console.log("JOIST DEBUG - Directly updating DOM with joist sizes:", {
        width: results.joistSize.width, 
        depth: results.joistSize.depth
      });
      
      // Update DOM directly
      joistWidthRef.current.textContent = `${results.joistSize.width}mm`;
      joistDepthRef.current.textContent = `${results.joistSize.depth}mm`;
      
      // Force a re-render after a short delay
      setTimeout(() => {
        setUpdateCounter(prev => prev + 1);
      }, 50);
    }
  }, [isClient, results, updateCounter]);
  
  // During server-side rendering or before client hydration
  if (!isClient) {
    return (
      <div className="apple-card p-6 text-center">
        <h2 className="text-xl font-semibold mb-4">Results</h2>
        <p style={{ color: 'var(--apple-text-secondary)' }}>Loading calculation results...</p>
      </div>
    );
  }
  
  // If no results are available
  if (!results) {
    return (
      <div className="apple-card p-6 text-center">
        <h2 className="text-xl font-semibold mb-4">Results</h2>
        <p style={{ color: 'var(--apple-text-secondary)' }}>Configure your timber structure parameters to see calculation results.</p>
      </div>
    );
  }
  
  // Add console log to debug results structure (client-side only)
  console.log("ResultsDisplay - results object:", results, "Update counter:", updateCounter);
  
  // Generate a key for the component to force re-render when values change
  const resultsKey = `joists-${updateCounter}-beams-${results.interiorBeamSize?.width || 'NA'}-${results.interiorBeamSize?.depth || 'NA'}`;
  
  return (
    <div className="apple-results" key={resultsKey} ref={resultsRef}>
      <style jsx>{`
        /* Toggle Switch Styles */
        .toggle-checkbox:checked {
          right: 0;
          border-color: #3b82f6;
        }
        .toggle-checkbox:checked + .toggle-label {
          background-color: #3b82f6;
        }
        .toggle-checkbox {
          right: 0;
          z-index: 5;
          opacity: 0;
          width: 0;
          height: 0;
        }
        .toggle-checkbox + .toggle-label {
          position: relative;
        }
        .toggle-checkbox + .toggle-label:before {
          content: '';
          position: absolute;
          width: 1.5rem;
          height: 1.5rem;
          border-radius: 50%;
          background-color: white;
          top: -3px;
          left: 0;
          transition: 0.2s;
          box-shadow: 0 0 2px rgba(0, 0, 0, 0.3);
        }
        .toggle-checkbox:checked + .toggle-label:before {
          left: calc(100% - 1.5rem);
        }
      `}</style>
      <div className="apple-card-header flex justify-between items-center">
        <h2 className="text-lg md:text-xl font-semibold m-0">Results</h2>
        
        {/* Action Buttons */}
        <div className="flex">
          <Link 
            href="/3d-visualization" 
            className="apple-button apple-button-secondary mr-4"
          >
            View 3D Model
          </Link>
          <button 
            className="apple-button apple-button-primary"
            onClick={onSaveClick}
          >
            Save Project
          </button>
        </div>
      </div>
      
      <div className="apple-results-body">
        {/* Bay Layout Visualizer Section */}
        <div className="apple-card mb-8">
          <div className="apple-card-header">
            <h3 className="text-md font-semibold">Bay Layout Visualization</h3>
          </div>
          <div className="apple-card-body">
            <BayLayoutVisualizer
              results={results}
              buildingLength={buildingLength}
              buildingWidth={buildingWidth}
              lengthwiseBays={lengthwiseBays}
              widthwiseBays={widthwiseBays}
              joistsRunLengthwise={joistsRunLengthwise}
              isMobile={isMobile}
              useCustomBayDimensions={useCustomBayDimensions}
              customLengthwiseBayWidths={customLengthwiseBayWidths}
              customWidthwiseBayWidths={customWidthwiseBayWidths}
            />
            
            {/* Configuration Controls */}
            <div className="mt-4 pt-4 border-t border-gray-200">
              {/* Joist Direction */}
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-1">Joist Direction</label>
                <div className="flex items-center">
                  <button
                    type="button"
                    onClick={() => onToggleJoistDirection(true)}
                    className={`px-4 py-2 text-sm font-medium rounded-l-md ${
                      joistsRunLengthwise
                        ? 'bg-blue-600 text-white'
                        : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                    }`}
                  >
                    Lengthwise
                  </button>
                  <button
                    type="button"
                    onClick={() => onToggleJoistDirection(false)}
                    className={`px-4 py-2 text-sm font-medium rounded-r-md ${
                      !joistsRunLengthwise
                        ? 'bg-blue-600 text-white'
                        : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                    }`}
                  >
                    Widthwise
                  </button>
                </div>
                <p className="mt-1 text-xs text-gray-500">
                  {joistsRunLengthwise
                    ? `Joists span ${buildingWidth}m width, supported by beams along length`
                    : `Joists span ${buildingLength}m length, supported by beams along width`}
                </p>
              </div>
              
              {/* Custom Bay Dimensions */}
              <div className="mb-4">
                <div className="flex items-center justify-between">
                  <label className="block text-sm font-medium text-gray-700">Custom Bay Dimensions</label>
                  <div className="relative inline-block w-10 mr-2 align-middle select-none">
                    <input
                      type="checkbox"
                      name="toggle"
                      id="customBayToggle"
                      checked={useCustomBayDimensions}
                      onChange={() => onToggleCustomBayDimensions(!useCustomBayDimensions)}
                      className="toggle-checkbox absolute block w-6 h-6 rounded-full bg-white border-4 appearance-none cursor-pointer"
                    />
                    <label
                      htmlFor="customBayToggle"
                      className="toggle-label block overflow-hidden h-6 rounded-full bg-gray-300 cursor-pointer"
                    ></label>
                  </div>
                </div>
                
                {useCustomBayDimensions && (
                  <div className={`mt-3 ${isMobile ? '' : 'grid grid-cols-2 gap-4'}`}>
                    {/* Lengthwise Bay Widths */}
                    <div className="mb-4">
                      <label className="block text-sm font-medium text-gray-700 mb-1">Lengthwise Bay Widths (m)</label>
                      <div className="space-y-2">
                        {Array.from({ length: lengthwiseBays }).map((_, index) => (
                          <div key={`lengthwise-bay-${index}`} className="flex items-center">
                            <span className="text-sm text-gray-500 mr-2 w-6">L{index + 1}:</span>
                            <input
                              type="number"
                              min="0.5"
                              max="10"
                              step="0.1"
                              value={customLengthwiseBayWidths[index]}
                              onChange={(e) => onLengthwiseBayWidthChange(index, parseFloat(e.target.value))}
                              className="block w-full py-1 px-2 border border-gray-300 rounded-md shadow-sm text-sm"
                            />
                          </div>
                        ))}
                      </div>
                    </div>
                    
                    {/* Widthwise Bay Widths */}
                    <div className="mb-4">
                      <label className="block text-sm font-medium text-gray-700 mb-1">Widthwise Bay Widths (m)</label>
                      <div className="space-y-2">
                        {Array.from({ length: widthwiseBays }).map((_, index) => (
                          <div key={`widthwise-bay-${index}`} className="flex items-center">
                            <span className="text-sm text-gray-500 mr-2 w-6">W{index + 1}:</span>
                            <input
                              type="number"
                              min="0.5"
                              max="10"
                              step="0.1"
                              value={customWidthwiseBayWidths[index]}
                              onChange={(e) => onWidthwiseBayWidthChange(index, parseFloat(e.target.value))}
                              className="block w-full py-1 px-2 border border-gray-300 rounded-md shadow-sm text-sm"
                            />
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>

        {/* Total Cost Estimate Section */}
        <div className="apple-card mb-8">
          <div className="apple-card-body">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="p-6 bg-gray-50 rounded-lg">
                <h3 className="text-xl font-semibold mb-4">Total Cost Estimate</h3>
                <div className="text-4xl font-bold text-green-600 mb-2">
                  {results.costs?.total ? formatCurrency(results.costs.total) : 'N/A'}
                </div>
                <div className="text-sm text-gray-500">
                  Excluding GST and installation
                </div>
              </div>
              <div className="p-6 bg-gray-50 rounded-lg">
                <h3 className="text-xl font-semibold mb-4">Carbon Saving vs Steel/Concrete:</h3>
                <div className="text-4xl font-bold text-green-600 mb-2">
                  {results.carbonSavings ? `${(results.carbonSavings / 1000).toFixed(2)} tonnes CO₂e` : 'N/A'}
                </div>
                <div className="text-sm text-gray-500">
                  Equivalent to {results.carbonSavings ? `${Math.round(results.carbonSavings / 22)}` : 'N/A'} trees planted
                </div>
              </div>
            </div>
          </div>
        </div>
        
        {/* Member Sizes Section */}
        <div className="apple-card mb-8">
          <div className="apple-card-header">
            <h3 className="text-md font-semibold">Member Sizes</h3>
          </div>
          <div className="apple-card-body">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div>
                <h4 className="text-sm font-medium mb-2">Joists</h4>
                <div className="text-sm">
                  <p><span className="text-gray-500">Width:</span> <span ref={joistWidthRef} data-joist-width>{results.joistSize?.width || 'N/A'}mm</span></p>
                  <p><span className="text-gray-500">Depth:</span> <span ref={joistDepthRef} data-joist-depth>{results.joistSize?.depth || 'N/A'}mm</span></p>
                </div>
              </div>
              <div>
                <h4 className="text-sm font-medium mb-2">Beams</h4>
                <div className="text-sm">
                  <p><span className="text-gray-500">Interior Beams:</span> {results.interiorBeamSize?.width || 'N/A'}mm × {results.interiorBeamSize?.depth || 'N/A'}mm</p>
                  <p><span className="text-gray-500">Edge Beams:</span> {results.edgeBeamSize?.width || 'N/A'}mm × {results.edgeBeamSize?.depth || 'N/A'}mm</p>
                </div>
              </div>
              <div>
                <h4 className="text-sm font-medium mb-2">Columns</h4>
                <div className="text-sm">
                  <p><span className="text-gray-500">Size:</span> {results.columnSize?.width || 'N/A'}mm × {results.columnSize?.depth || 'N/A'}mm</p>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        {/* Cost Summary Section */}
        <div className="apple-card mb-8">
          <div className="apple-card-header">
            <h3 className="text-md font-semibold">Cost Summary</h3>
          </div>
          <div className="apple-card-body">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <h4 className="text-sm font-medium mb-2">Materials</h4>
                <div className="text-sm">
                  <p><span className="text-gray-500">Beams:</span> {results.costs?.elements?.beams?.cost ? formatCurrency(results.costs.elements.beams.cost) : 'N/A'}</p>
                  <p><span className="text-gray-500">Columns:</span> {results.costs?.elements?.columns?.cost ? formatCurrency(results.costs.elements.columns.cost) : 'N/A'}</p>
                  <p><span className="text-gray-500">Joists:</span> {results.costs?.elements?.joists?.cost ? formatCurrency(results.costs.elements.joists.cost) : 'N/A'}</p>
                </div>
              </div>
              <div>
                <h4 className="text-sm font-medium mb-2">Total</h4>
                <div className="text-sm">
                  <p><span className="text-gray-500">Materials:</span> {results.costs?.total ? formatCurrency(results.costs.total) : 'N/A'}</p>
                  <p><span className="text-gray-500">Carbon Saved:</span> {results.carbonSavings ? `${results.carbonSavings.toFixed(2)} kg CO₂` : 'N/A'}</p>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        {/* Cost Breakdown Section */}
        <div className="apple-card mb-8">
          <div className="apple-card-header">
            <h3 className="text-md font-semibold">Cost Breakdown</h3>
          </div>
          <div className="apple-card-body">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div>
                <h4 className="text-sm font-medium mb-2">Joist Costs</h4>
                <div className="text-sm">
                  <p><span className="text-gray-500">Total Cost:</span> {results.costs?.elements?.joists?.cost ? formatCurrency(results.costs.elements.joists.cost) : 'N/A'}</p>
                  <p><span className="text-gray-500">Rate (per m²):</span> {results.costs?.elements?.joists?.rate ? `$${results.costs.elements.joists.rate.toFixed(2)}` : 'N/A'}</p>
                  <p><span className="text-gray-500">Area Used:</span> {results.costs?.elements?.joists?.volume ? `${results.costs.elements.joists.volume.toFixed(2)} m²` : 'N/A'}</p>
                  <p><span className="text-gray-500">Calculation:</span> {results.costs?.elements?.joists?.volume && results.costs?.elements?.joists?.rate ? `${results.costs.elements.joists.volume.toFixed(2)} m² × $${results.costs.elements.joists.rate.toFixed(2)}` : 'N/A'}</p>
                </div>
              </div>
              <div>
                <h4 className="text-sm font-medium mb-2">Beam Costs</h4>
                <div className="text-sm">
                  <p><span className="text-gray-500">Total Cost:</span> {results.costs?.elements?.beams?.cost ? formatCurrency(results.costs.elements.beams.cost) : 'N/A'}</p>
                  <p><span className="text-gray-500">Rate (per m³):</span> {results.costs?.elements?.beams?.rate ? `$${results.costs.elements.beams.rate.toFixed(2)}` : 'N/A'}</p>
                  <p><span className="text-gray-500">Volume Used:</span> {results.costs?.elements?.beams?.volume ? `${results.costs.elements.beams.volume.toFixed(2)} m³` : 'N/A'}</p>
                  <p><span className="text-gray-500">Calculation:</span> {results.costs?.elements?.beams?.volume && results.costs?.elements?.beams?.rate ? `${results.costs.elements.beams.volume.toFixed(2)} m³ × $${results.costs.elements.beams.rate.toFixed(2)}` : 'N/A'}</p>
                </div>
              </div>
              <div>
                <h4 className="text-sm font-medium mb-2">Column Costs</h4>
                <div className="text-sm">
                  <p><span className="text-gray-500">Total Cost:</span> {results.costs?.elements?.columns?.cost ? formatCurrency(results.costs.elements.columns.cost) : 'N/A'}</p>
                  <p><span className="text-gray-500">Rate (per m³):</span> {results.costs?.elements?.columns?.rate ? `$${results.costs.elements.columns.rate.toFixed(2)}` : 'N/A'}</p>
                  <p><span className="text-gray-500">Volume Used:</span> {results.costs?.elements?.columns?.volume ? `${results.costs.elements.columns.volume.toFixed(2)} m³` : 'N/A'}</p>
                  <p><span className="text-gray-500">Calculation:</span> {results.costs?.elements?.columns?.volume && results.costs?.elements?.columns?.rate ? `${results.costs.elements.columns.volume.toFixed(2)} m³ × $${results.costs.elements.columns.rate.toFixed(2)}` : 'N/A'}</p>
                </div>
              </div>
            </div>
            <div className="mt-4 pt-4 border-t border-gray-200">
              <div className="text-sm font-medium">
                <p><span className="text-gray-700">Total Material Cost:</span> {results.costs?.total ? formatCurrency(results.costs.total) : 'N/A'}</p>
                <p><span className="text-gray-700">Rate Sources:</span> Rates are stored in localStorage and can be customized.</p>
              </div>
            </div>
          </div>
        </div>
        
        {/* Material Summary Section */}
        <div className="apple-card">
          <div className="apple-card-header">
            <h3 className="text-md font-semibold">Material Summary</h3>
          </div>
          <div className="apple-card-body">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div>
                <h4 className="text-sm font-medium mb-2">Joists</h4>
                <div className="text-sm">
                  <p><span className="text-gray-500">Volume:</span> {results.elementVolumes?.joists ? `${results.elementVolumes.joists.toFixed(2)} m³` : 'N/A'}</p>
                  <p><span className="text-gray-500">Quantity:</span> {results.elementCounts?.joists ? `${results.elementCounts.joists} pieces` : 'N/A'}</p>
                  <p><span className="text-gray-500">Size:</span> {results.joistSize ? `${results.joistSize.width}×${results.joistSize.depth}mm` : 'N/A'}</p>
                  <p><span className="text-gray-500">Floor Area:</span> {results.floorArea ? `${results.floorArea} m²` : 'N/A'}</p>
                </div>
              </div>
              <div>
                <h4 className="text-sm font-medium mb-2">Beams</h4>
                <div className="text-sm">
                  <p><span className="text-gray-500">Volume:</span> {results.elementVolumes?.beams ? `${results.elementVolumes.beams.toFixed(2)} m³` : 'N/A'}</p>
                  <p><span className="text-gray-500">Quantity:</span> {results.elementCounts?.beams ? `${results.elementCounts.beams} pieces` : 'N/A'}</p>
                  <p><span className="text-gray-500">Interior:</span> {results.interiorBeamSize ? `${results.interiorBeamSize.width}×${results.interiorBeamSize.depth}mm` : 'N/A'}</p>
                  <p><span className="text-gray-500">Edge:</span> {results.edgeBeamSize ? `${results.edgeBeamSize.width}×${results.edgeBeamSize.depth}mm` : 'N/A'}</p>
                </div>
              </div>
              <div>
                <h4 className="text-sm font-medium mb-2">Columns</h4>
                <div className="text-sm">
                  <p><span className="text-gray-500">Volume:</span> {results.elementVolumes?.columns ? `${results.elementVolumes.columns.toFixed(2)} m³` : 'N/A'}</p>
                  <p><span className="text-gray-500">Quantity:</span> {results.elementCounts?.columns ? `${results.elementCounts.columns} pieces` : 'N/A'}</p>
                  <p><span className="text-gray-500">Size:</span> {results.columnSize ? `${results.columnSize.width}×${results.columnSize.depth}mm` : 'N/A'}</p>
                </div>
              </div>
            </div>
            <div className="mt-4 pt-4 border-t border-gray-200">
              <div className="text-sm font-medium">
                <p><span className="text-gray-700">Total Timber Volume:</span> {results.timberVolume ? `${results.timberVolume.toFixed(2)} m³` : 'N/A'}</p>
                <p><span className="text-gray-700">Total Mass:</span> {results.timberWeight ? `${(results.timberWeight / 1000).toFixed(2)} tonnes` : 'N/A'}</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ResultsDisplay; 